structure Syn = AstSyntax

%%
%header (functor ExprLrValsFun (structure Token : TOKEN))

%term EOF
   | IDENT of string
   | ARRTYPE
   | FORALL
   | SMALLLAMBDA
   | BIGLAMBDA
   | COLON
   | LPAREN
   | RPAREN
   | RBRACKET
   | LBRACKET
   | LSQUARE
   | RSQUARE
   | LTEQUALS
   | DOT
   | APOSTROPHE

%nonterm start of Syn.exp
       | exp   of Syn.exp
       | typ   of Syn.typ

%verbose
%pos int
%start start
%eop EOF
%noshift EOF
%name Expr
%%

start : exp                             (exp)

typ : IDENT                             (Syn.intoTyp (Syn.TVAR IDENT))

exp : IDENT                             (Syn.intoExp (Syn.NEU (Syn.VAR IDENT)))
    | SMALLLAMBDA IDENT DOT exp         (Syn.intoExp (Syn.VAL (Syn.LAM (IDENT, exp))))
    | exp LPAREN exp RPAREN             (Syn.intoExp (Syn.NEU (Syn.AP (exp1, exp2))))
    | BIGLAMBDA IDENT DOT exp           (Syn.intoExp (Syn.VAL (Syn.TLAM (IDENT, exp))))
    | exp LSQUARE typ RSQUARE           (Syn.intoExp (Syn.NEU (Syn.TAPP (exp, typ))))
