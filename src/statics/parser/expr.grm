open AstSyntax

%%
%header (functor ExprLrValsFun (structure Token : TOKEN))

%term EOF
   | IDENT of string
   | ARRTYPE
   | FORALL
   | SMALLLAMBDA
   | BIGLAMBDA
   | COLON
   | LPAREN
   | RPAREN
   | RBRACKET
   | LBRACKET
   | LSQUARE
   | RSQUARE
   | LTEQUALS
   | DOT
   | APOSTROPHE

%nonterm start of exp
       | exp   of exp
       | typ   of typ

%verbose
%pos int
%start start
%eop EOF
%noshift EOF
%name Expr
%%

start : exp                             (exp)

typ : IDENT                             (intoTyp (TVAR IDENT))
    | FORALL IDENT DOT typ              (intoTyp (ALL (IDENT, typ)))
    | typ ARRTYPE typ                   (intoTyp (ARR (typ1, typ2)))

exp : IDENT                             (intoExp (NEU (VAR IDENT)))
    | SMALLLAMBDA IDENT DOT exp         (intoExp (VAL (LAM (IDENT, exp))))
    | exp LPAREN exp RPAREN             (intoExp (NEU (AP (exp1, exp2))))
    | BIGLAMBDA IDENT DOT exp           (intoExp (VAL (TLAM (IDENT, exp))))
    | exp LSQUARE typ RSQUARE           (intoExp (NEU (TAPP (exp, typ))))
